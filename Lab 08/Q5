#include <iostream>
using namespace std;

class Matrix2x2;

class MatrixHelper {
public:
    void updateElement(Matrix2x2& m, int row, int col, int value);
};

class Matrix2x2 {
private:
    int mat[2][2];

public:
    Matrix2x2(int a = 0, int b = 0, int c = 0, int d = 0) {
        mat[0][0] = a; mat[0][1] = b;
        mat[1][0] = c; mat[1][1] = d;
    }

    Matrix2x2 operator+(const Matrix2x2& m) {
        return Matrix2x2(
            mat[0][0] + m.mat[0][0], mat[0][1] + m.mat[0][1],
            mat[1][0] + m.mat[1][0], mat[1][1] + m.mat[1][1]
        );
    }

    Matrix2x2 operator-(const Matrix2x2& m) {
        return Matrix2x2(
            mat[0][0] - m.mat[0][0], mat[0][1] - m.mat[0][1],
            mat[1][0] - m.mat[1][0], mat[1][1] - m.mat[1][1]
        );
    }

    Matrix2x2 operator*(const Matrix2x2& m) {
        return Matrix2x2(
            mat[0][0]*m.mat[0][0] + mat[0][1]*m.mat[1][0],
            mat[0][0]*m.mat[0][1] + mat[0][1]*m.mat[1][1],
            mat[1][0]*m.mat[0][0] + mat[1][1]*m.mat[1][0],
            mat[1][0]*m.mat[0][1] + mat[1][1]*m.mat[1][1]
        );
    }

    friend int determinant(const Matrix2x2& m);
    friend class MatrixHelper;

    friend ostream& operator<<(ostream& out, const Matrix2x2& m) {
        out << "[ " << m.mat[0][0] << " " << m.mat[0][1] << " ]\n";
        out << "[ " << m.mat[1][0] << " " << m.mat[1][1] << " ]";
        return out;
    }
};

int determinant(const Matrix2x2& m) {
    return m.mat[0][0] * m.mat[1][1] - m.mat[0][1] * m.mat[1][0];
}

void MatrixHelper::updateElement(Matrix2x2& m, int row, int col, int value) {
    if (row >= 0 && row < 2 && col >= 0 && col < 2)
        m.mat[row][col] = value;
}

int main() {
    Matrix2x2 m1(1, 3, 3, 4), m2(9, 8, 1, 2);
    MatrixHelper helper;

    cout << "Matrix 1:\n" << m1
         << "\n\nMatrix 2:\n" << m2
         << "\n\nAddition:\n" << m1 + m2
         << "\n\nSubtraction:\n" << m1 - m2
         << "\n\nMultiplication:\n" << m1 * m2
         << "\n\nDeterminant of Matrix 1: " << determinant(m1) << endl;

    helper.updateElement(m1, 0, 0, 9);
    cout << "\nMatrix 1 after update:\n" << m1 << endl;

    return 0;
}
