#include <iostream>
#include <cmath>
using namespace std;

class Complex {
private:
    double real, imag;
public:
    Complex(double r = 0, double i = 0) : real(r), imag(i) {}

    Complex operator+(const Complex& c) {
        return Complex(real + c.real, imag + c.imag);
    }

    Complex operator-(const Complex& c) {
        return Complex(real - c.real, imag - c.imag);
    }

    Complex operator*(const Complex& c) {
        return Complex(real * c.real - imag * c.imag, real * c.imag + imag * c.real);
    }

    Complex operator/(const Complex& c) {
        double denom = c.real * c.real + c.imag * c.imag;
        return Complex((real * c.real + imag * c.imag) / denom, (imag * c.real - real * c.imag) / denom);
    }

    friend double magnitude(const Complex& c);

    friend ostream& operator<<(ostream& out, const Complex& c) {
        out << "(" << c.real << (c.imag >= 0 ? " + " : " - ") << fabs(c.imag) << "i)";
        return out;
    }
};

double magnitude(const Complex& c) {
    return sqrt(c.real * c.real + c.imag * c.imag);
}

int main() {
    Complex a(3, 5), b(1, -7);
    cout <<"a =" << a<<"\nb = " << b <<endl;
    cout <<"a + b = " << a + b <<endl;
    cout <<"a - b = " << a - b <<endl;
    cout <<"a * b = " << a * b <<endl;
    cout <<"a / b = " << a / b <<endl;
    cout << \"Magnitude of a = " << magnitude(a) << endl;
    return 0;
}
