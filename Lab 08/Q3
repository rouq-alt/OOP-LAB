#include <iostream>
using namespace std;
class Vector2D {
private:
    int x, y;
public:
    Vector2D(int x = 0, int y = 0) : x(x), y(y) {}

    Vector2D operator+(const Vector2D& v1) {
        return Vector2D(x + v1.x, y + v1.y);
    }

    Vector2D operator-(const Vector2D& v1) {
        return Vector2D(x - v1.x, y - v1.y);
    }

    Vector2D operator*(int scalar) {
        return Vector2D(x * scalar, y * scalar);
    }

    friend int dotProduct(const Vector2D& a, const Vector2D& b);

    friend ostream& operator<<(ostream& out, const Vector2D& v) {
        out << "(" << v.x << ", " << v.y << ")";
        return out;
    }
};

int dotProduct(const Vector2D& a, const Vector2D& b) {
    return a.x * b.x + a.y * b.y;
}

int main() {
    Vector2D v1(9, 4), v2(1, 8);
    cout << "v1 = " << v1 << "\nv2 = " << v2 << endl;
    cout << "v1 + v2 = " << v1 + v2 << endl;
    cout << "v1 - v2 = " << v1 - v2 << endl;
    cout << "v1 * 3 = " << v1 * 3 << endl;
    cout << "Dot product = " << dotProduct(v1, v2) << endl;
    return 0;
}
