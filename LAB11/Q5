#include <iostream>
#include <stdexcept>
using namespace std;

class NegativeStockException : public exception {
public:
    const char* what() const noexcept override {
        return "Stock cannot be negative.";
    }
};

class OverCapacityException : public exception {
public:
    const char* what() const noexcept override {
        return "Stock exceeds maximum capacity.";
    }
};

=
class InventoryItem {
private:
    int stock;
    int maxCapacity;

public:
    InventoryItem(int max) : stock(0), maxCapacity(max) {}

    void setStock(int value) {
        if (value < 0)
            throw NegativeStockException();
        if (value > maxCapacity)
            throw OverCapacityException();

        stock = value;
        cout << "Stock successfully set to: " << stock << endl;
    }
};

int main() {
    InventoryItem item(100);

    try {
        cout << "Attempting to set stock to -5...\n";
        item.setStock(-5);
    } catch (const exception& e) {
        cout << "Exception: " << e.what() << endl;
    }

    try {
        cout << "\nAttempting to set stock to 120 (max 100)...\n";
        item.setStock(120);
    } catch (const exception& e) {
        cout << "Exception: " << e.what() << endl;
    }

    return 0;
}
