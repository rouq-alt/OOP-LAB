#include <iostream>
#include <stdexcept>
using namespace std;

class DatabaseException : public exception {
public:
    const char* what() const noexcept override {
        return "A database error occurred";
    }
};

class ConnectionFailedException : public DatabaseException {
public:
    const char* what() const noexcept override {
        return "Connection failed: Could not connect to the database.";
    }
};

class QueryTimeoutException : public DatabaseException {
public:
    const char* what() const noexcept override {
        return "Query timeout: The database query took too long.";
    }
};


template <typename T>
class DatabaseConnector {
private:
    T dname;

public:
    DatabaseConnector(T name) : dname(name) {}

    void connect() {
        if (dname == "invalid_db") {
            throw ConnectionFailedException();
        } else if (dname == "slow_db") {
            throw QueryTimeoutException();
        } else {
            cout << "Connected to " << dname << " successfully.\n";
        }
    }
};


int main() {
    try {
        cout << "Attempting to connect to invalid_db...\n";
        DatabaseConnector<string> d1("invalid_db");
        d1.connect();
    } catch (const ConnectionFailedException& e) {
        cout << "Caught ConnectionFailedException - what(): " << e.what() << endl;
    }

    try {
        cout << "\nAttempting to connect to slow_db...\n";
        DatabaseConnector<string> d2("slow_db");
        d2.connect();
    } catch (const DatabaseException& e) {
        cout << "Caught a general DatabaseException - what(): " << e.what() << endl;
    }

    return 0;
}
