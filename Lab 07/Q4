#include <iostream>
#include <string>
using namespace std;

class Person {
protected:
    string name;
    int age;
    string contactNumber;
    string address;

public:
    Person(string n, int a, string contact, string addr = "Not Applicable")
        : name(n), age(a), contactNumber(contact), address(addr) {}

    virtual void displayInfo() const {
        cout << "Name: " << name << "\nAge: " << age
             << "\nContact: " << contactNumber
             << "\nAddress: " << address << endl;
    }

    virtual void updateInfo(string contact, string addr) {
        contactNumber = contact;
        address = addr;
        cout << "Info updated.\n";
    }
};

class Patient : public Person {
    int patientID;
    string medicalHistory, doctorAssigned;

public:
    Patient(string n, int a, string contact, int id, string history, string doctor)
        : Person(n, a, contact), patientID(id), medicalHistory(history), doctorAssigned(doctor) {}

    void displayInfo() const override {
        Person::displayInfo();
        cout << "Patient ID: " << patientID
             << "\nMedical History: " << medicalHistory
             << "\nDoctor Assigned: " << doctorAssigned << endl;
    }
};

class Doctor : public Person {
    string specialization;
    double consultationFee;
    string patientsList[10];
    int patientCount = 0;

public:
    Doctor(string n, int a, string contact, string spec, double fee)
        : Person(n, a, contact), specialization(spec), consultationFee(fee) {}

    void addPatient(string patientName) {
        if (patientCount < 10)
            patientsList[patientCount++] = patientName;
        else
            cout << "Patient list full.\n";
    }

    void displayInfo() const override {
        Person::displayInfo();
        cout << "Specialization: " << specialization
             << "\nConsultation Fee: $" << consultationFee
             << "\nPatients: ";
        if (patientCount == 0)
            cout << "None\n";
        else {
            for (int i = 0; i < patientCount; ++i)
                cout << patientsList[i] << (i < patientCount - 1 ? ", " : "\n");
        }
    }
};

class Nurse : public Person {
    string assignedWard, shiftTimings;

public:
    Nurse(string n, int a, string contact, string ward, string shift)
        : Person(n, a, contact), assignedWard(ward), shiftTimings(shift) {}

    void displayInfo() const override {
        Person::displayInfo();
        cout << "Ward: " << assignedWard
             << "\nShift: " << shiftTimings << endl;
    }
};

class Administrator : public Person {
    string department;
    double salary;

public:
    Administrator(string n, int a, string contact, string dept, double sal)
        : Person(n, a, contact), department(dept), salary(sal) {}

    void updateInfo(string contact, string addr, double newSalary) {
        Person::updateInfo(contact, addr);
        salary = newSalary;
        cout << "Salary updated: $" << salary << endl;
    }

    void displayInfo() const override {
        Person::displayInfo();
        cout << "Department: " << department
             << "\nSalary: $" << salary << endl;
    }
};

int main() {
    Patient patient("Urooj", 35, "123-456-7890", 101, "Diabetes", "Dr. Smith");
    Doctor doctor("Dr. Erum", 50, "987-654-3210", "Cardiology", 200.00);
    Nurse nurse("Fatima", 28, "111-222-3333", "ICU", "Night");
    Administrator admin("Shorouq", 45, "444-555-6666", "HR", 5000.00);

    cout << "\n--- Patient ---\n";
	patient.displayInfo();
    cout << "\n--- Doctor ---\n"; 
    doctor.addPatient("John Doe");
	doctor.displayInfo();
    cout << "\n--- Nurse ---\n";  
	nurse.displayInfo();
    cout << "\n--- Admin ---\n"; 
	admin.displayInfo();

    cout << "\nUpdating Admin...\n";
    admin.updateInfo("777-888-9999", "New Block", 5500.00);

    cout << "\n--- Updated Admin ---\n";
	admin.displayInfo();

    return 0;
}
